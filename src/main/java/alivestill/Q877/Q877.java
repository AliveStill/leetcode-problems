package alivestill.Q877;

import org.junit.Test;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DisplayName;

public class Q877 {
    static Solution so = new Solution();
    static SolutionV2 so2 = new SolutionV2();

    public static void main(String[] args) {

    }

    /******************** solution version v1.0  test suite ************************/
    @Test
    @DisplayName("sample case 1")
    public void test1() {
        int[] piles = new int[] {
                5, 3, 4, 5
        };
        System.out.println(so.stoneGame(piles));
    }

    @Test(timeout = 200) // 200 ms as threshold
    @Disabled
    @DisplayName("pressure test")
    public void test2() {
        // 500 nums, TLE
        int[] piles = new int[] {
                56511, 51643, 67091, 79690,  6878, 53095, 13629, 66906, 10917, 56752, 72754, 22903, 57331, 45556, 22959, 47386, 38795, 83553, 85995, 30195,
                32722, 50237, 35975, 22771, 44696, 80707,  5011, 78767, 68712, 52432, 23537, 47580, 54815, 65119, 32886, 24580, 87149, 19130,   683, 86927,
                53971, 79374,  5383, 38900, 91173, 43515, 11781, 42467, 42073, 73086, 34602, 56086, 82305, 37719, 14507, 54010, 54822, 43061, 75702, 52692,
                74147, 84581, 83075, 11222, 77812, 18833, 49025, 81532, 61886, 66751, 52337, 16995,  9062, 24497, 31605, 23118, 60413, 13884,  2052, 25737,
                22353, 95698, 31767, 56086, 71938, 28130, 41892, 15719, 81585, 80219, 85532, 43918, 19414, 44304, 10275, 10225,  2041, 33317, 74714, 86430,
                41684, 40804, 98081,   888, 70280, 61698, 35150, 38389, 29029, 60927, 89467, 15764, 62776, 11579, 73558, 84609,  8468, 65298, 67884, 53295,
                6480, 62365, 42523, 57463, 36025, 96553, 49673, 70399, 34273, 13880, 13506, 22470, 43940, 72469, 94037, 73655, 99253,  8409, 58968, 16024,
                99394, 11388, 90498, 67787, 22489, 63295, 50076, 74258, 78984, 33022, 46566, 20455, 20444, 67192,  1446, 80214, 51285, 62408, 65939, 59455,
                74428, 97855,  3519, 71839, 41230, 80541, 26712, 84887, 44742, 23114, 70878, 17489, 32947, 62987, 81811, 28278, 89796, 88776, 38940, 12373,
                10910, 43302, 30552, 23383, 96780, 12212, 83011, 79708, 29519, 80677, 38515, 19622, 22782, 77748, 35395, 59403, 52366, 70172,  3121, 82891,
                15922, 94863, 24220, 18259, 98896, 20820, 81582, 17310, 51592, 57688, 29798, 51773, 68459,  6626, 22708, 70803, 98138, 60551, 57448, 51557,
                42730,  4873, 77121,  2796, 95658,  7059, 76033, 70299, 66119, 25305, 50630, 90340, 12199, 76582, 53685, 34693, 64560, 26718, 74676, 47531,
                71930, 37223, 83062, 34995, 38070, 78850, 22281, 33802, 25732, 95569, 85551, 87379, 18261, 39784, 92256,  2666, 12563, 42947, 56718, 73431,
                26038, 45777, 92863, 28061, 54364, 28719, 67745, 72256, 25964, 54981, 93722, 29052, 25692, 23283, 83056, 38877, 74471, 99262, 83000, 37000,
                24726, 71361, 89179, 42211, 65720, 65439, 95575, 41432, 98338, 22255, 37996, 39566, 17485,   770, 10297,  6569,  5066, 14026, 97144, 26119,
                74204, 19718,  7123, 66098, 50708,  6462, 42753, 92506,  7222, 81686, 26289, 28656, 58498, 95281, 81389, 63037, 93893,  6051, 98576, 92979,
                16285, 73639, 45449, 95201, 10069, 41289, 50490, 69615, 51991, 42946, 72217, 42559, 89832, 37490, 37163, 43581, 85706, 80271, 68383, 70626,
                13956, 63747, 66184, 21417, 86670, 98360, 29647, 67852, 24027, 89470, 33297,  8255,  7014, 31260, 41343, 61829, 40939, 85620, 16896, 83111,
                83984, 37531, 17478, 60215,  1193, 28157, 83513, 98580, 48760, 33094, 39844, 95604, 52548, 99279, 26886, 28452, 55309, 86131,  5319, 89685,
                63009, 81146, 95299, 18547, 43651, 34142, 57944, 18387, 87051, 64844, 39680, 49388, 12280, 24297,  3475, 60496, 97422, 57201,  3587, 98791,
                69460, 36084, 46905, 89040, 31317, 12291, 15165,  3168, 11620, 92426, 84372, 30359, 36351, 43188, 80306, 88472, 74540, 37421, 44292, 50562,
                3758, 95225, 45636, 23278, 69177, 83956, 56501, 77398, 80160,  3865, 59623,  2839, 37218, 46926, 58048, 95527, 31608, 65608, 11241, 63917,
                85190, 43227, 19340, 34697, 65630, 17249, 36538, 57429, 34673, 42935, 87951, 23745,  4329,  8047, 67982, 45741, 48182,  7164, 61428, 98926,
                24614, 33752,  8836, 30596, 68472, 39591, 60488, 77480,  5101, 59812, 11146, 21468, 44493, 95560, 90025, 96132, 33733, 68323, 37426, 98963,
                12972, 12362, 74111, 42850, 30082, 17262, 79123, 82198, 28100, 36001, 25596, 55486, 57032,  9338, 67508, 96693, 21344, 43742, 74858, 87060
        };
        System.out.println(so.stoneGame(piles));
    }

    @Test(timeout = 200)    // timeout failed
    @Disabled
    @DisplayName("pressure test 2")
    public void test3() {
        // 200 nums pressure test
        int[] piles = new int[] {
                17642, 76909, 18788, 76579, 11426, 79807, 55240, 55781, 35639, 19045, 62223, 30209, 89775, 95949, 79971, 45247, 12444,   279, 91919, 53869,
                61229, 23054, 49480, 37706, 34021,  6971, 60720, 52013, 23547, 17622,  8278, 99681, 39870, 98451,  4341, 88556, 43162, 39164, 58695, 30420,
                1710, 14315, 32096, 24123, 36203, 12638, 76804, 55539, 53853, 12802, 60583, 14065, 66698, 61690, 77581,  9355, 53473, 37352, 52278, 54637,
                23630, 27789, 68864, 19834, 49943, 12194, 90691, 60337, 92335, 10167, 98287, 21702, 35585, 48626,  6890, 72577, 83799, 18707, 32707, 83686,
                2792, 33083, 53669, 31089, 85245, 95877, 40230, 14045, 98630, 65188, 70578, 64785, 40354, 51699, 11707,  9544, 77417, 19322, 11500, 15328,
                27350, 39091, 26418, 28904, 11531, 57679, 67610, 48843, 67617, 94279, 18591, 58234,  7562, 36021, 36542, 14423, 51435, 26780,   107, 18222,
                79915, 51022, 89084, 93571, 22850, 19155, 93458, 15717, 71485, 71931, 51770, 32425, 85550, 58576, 40662, 87154, 66375, 42259, 39284, 64687,
                47154, 41992, 93253, 68099, 65182,  7832,  1737,  6445, 24857, 62490, 67767, 17229, 16792,  3841, 13708, 94225, 27083,  8998, 74113, 23591,
                45093, 38897, 55860, 36310, 45755, 83098, 46657, 54748,  9198, 78180, 55572,  8201, 25477, 14169, 28761, 81897, 68264, 92308, 91581, 20762,
                88761, 43381, 46297,  9031, 48534, 34515, 96486, 25444, 30447, 92494, 31225, 40359, 14538, 94723, 64929, 70701,  9430, 83700, 69338, 76542
        };
        System.out.println(so.stoneGame(piles));
    }
    /********************************  end of test ********************************/


    /******************** solution version v2.0  test suite ************************/
    @Test
    @DisplayName("sample case 2")
    public void test4() {
        int[] piles = new int[] {
                5, 3, 4, 5
        };
        System.out.println(so2.stoneGame(piles));
    }

    @Test(timeout = 200) // 200 ms as threshold
    @Disabled
    @DisplayName("pressure test for version 2")
    public void test5() {
        // 500 nums, TLE
        int[] piles = new int[] {
                56511, 51643, 67091, 79690,  6878, 53095, 13629, 66906, 10917, 56752, 72754, 22903, 57331, 45556, 22959, 47386, 38795, 83553, 85995, 30195,
                32722, 50237, 35975, 22771, 44696, 80707,  5011, 78767, 68712, 52432, 23537, 47580, 54815, 65119, 32886, 24580, 87149, 19130,   683, 86927,
                53971, 79374,  5383, 38900, 91173, 43515, 11781, 42467, 42073, 73086, 34602, 56086, 82305, 37719, 14507, 54010, 54822, 43061, 75702, 52692,
                74147, 84581, 83075, 11222, 77812, 18833, 49025, 81532, 61886, 66751, 52337, 16995,  9062, 24497, 31605, 23118, 60413, 13884,  2052, 25737,
                22353, 95698, 31767, 56086, 71938, 28130, 41892, 15719, 81585, 80219, 85532, 43918, 19414, 44304, 10275, 10225,  2041, 33317, 74714, 86430,
                41684, 40804, 98081,   888, 70280, 61698, 35150, 38389, 29029, 60927, 89467, 15764, 62776, 11579, 73558, 84609,  8468, 65298, 67884, 53295,
                6480, 62365, 42523, 57463, 36025, 96553, 49673, 70399, 34273, 13880, 13506, 22470, 43940, 72469, 94037, 73655, 99253,  8409, 58968, 16024,
                99394, 11388, 90498, 67787, 22489, 63295, 50076, 74258, 78984, 33022, 46566, 20455, 20444, 67192,  1446, 80214, 51285, 62408, 65939, 59455,
                74428, 97855,  3519, 71839, 41230, 80541, 26712, 84887, 44742, 23114, 70878, 17489, 32947, 62987, 81811, 28278, 89796, 88776, 38940, 12373,
                10910, 43302, 30552, 23383, 96780, 12212, 83011, 79708, 29519, 80677, 38515, 19622, 22782, 77748, 35395, 59403, 52366, 70172,  3121, 82891,
                15922, 94863, 24220, 18259, 98896, 20820, 81582, 17310, 51592, 57688, 29798, 51773, 68459,  6626, 22708, 70803, 98138, 60551, 57448, 51557,
                42730,  4873, 77121,  2796, 95658,  7059, 76033, 70299, 66119, 25305, 50630, 90340, 12199, 76582, 53685, 34693, 64560, 26718, 74676, 47531,
                71930, 37223, 83062, 34995, 38070, 78850, 22281, 33802, 25732, 95569, 85551, 87379, 18261, 39784, 92256,  2666, 12563, 42947, 56718, 73431,
                26038, 45777, 92863, 28061, 54364, 28719, 67745, 72256, 25964, 54981, 93722, 29052, 25692, 23283, 83056, 38877, 74471, 99262, 83000, 37000,
                24726, 71361, 89179, 42211, 65720, 65439, 95575, 41432, 98338, 22255, 37996, 39566, 17485,   770, 10297,  6569,  5066, 14026, 97144, 26119,
                74204, 19718,  7123, 66098, 50708,  6462, 42753, 92506,  7222, 81686, 26289, 28656, 58498, 95281, 81389, 63037, 93893,  6051, 98576, 92979,
                16285, 73639, 45449, 95201, 10069, 41289, 50490, 69615, 51991, 42946, 72217, 42559, 89832, 37490, 37163, 43581, 85706, 80271, 68383, 70626,
                13956, 63747, 66184, 21417, 86670, 98360, 29647, 67852, 24027, 89470, 33297,  8255,  7014, 31260, 41343, 61829, 40939, 85620, 16896, 83111,
                83984, 37531, 17478, 60215,  1193, 28157, 83513, 98580, 48760, 33094, 39844, 95604, 52548, 99279, 26886, 28452, 55309, 86131,  5319, 89685,
                63009, 81146, 95299, 18547, 43651, 34142, 57944, 18387, 87051, 64844, 39680, 49388, 12280, 24297,  3475, 60496, 97422, 57201,  3587, 98791,
                69460, 36084, 46905, 89040, 31317, 12291, 15165,  3168, 11620, 92426, 84372, 30359, 36351, 43188, 80306, 88472, 74540, 37421, 44292, 50562,
                3758, 95225, 45636, 23278, 69177, 83956, 56501, 77398, 80160,  3865, 59623,  2839, 37218, 46926, 58048, 95527, 31608, 65608, 11241, 63917,
                85190, 43227, 19340, 34697, 65630, 17249, 36538, 57429, 34673, 42935, 87951, 23745,  4329,  8047, 67982, 45741, 48182,  7164, 61428, 98926,
                24614, 33752,  8836, 30596, 68472, 39591, 60488, 77480,  5101, 59812, 11146, 21468, 44493, 95560, 90025, 96132, 33733, 68323, 37426, 98963,
                12972, 12362, 74111, 42850, 30082, 17262, 79123, 82198, 28100, 36001, 25596, 55486, 57032,  9338, 67508, 96693, 21344, 43742, 74858, 87060
        };
        System.out.println(so2.stoneGame(piles));
    }

    @Test(timeout = 200)    // timeout failed
    @Disabled
    @DisplayName("pressure test 2 for version 2")
    public void test6() {
        // 200 nums pressure test
        int[] piles = new int[] {
                17642, 76909, 18788, 76579, 11426, 79807, 55240, 55781, 35639, 19045, 62223, 30209, 89775, 95949, 79971, 45247, 12444,   279, 91919, 53869,
                61229, 23054, 49480, 37706, 34021,  6971, 60720, 52013, 23547, 17622,  8278, 99681, 39870, 98451,  4341, 88556, 43162, 39164, 58695, 30420,
                1710, 14315, 32096, 24123, 36203, 12638, 76804, 55539, 53853, 12802, 60583, 14065, 66698, 61690, 77581,  9355, 53473, 37352, 52278, 54637,
                23630, 27789, 68864, 19834, 49943, 12194, 90691, 60337, 92335, 10167, 98287, 21702, 35585, 48626,  6890, 72577, 83799, 18707, 32707, 83686,
                2792, 33083, 53669, 31089, 85245, 95877, 40230, 14045, 98630, 65188, 70578, 64785, 40354, 51699, 11707,  9544, 77417, 19322, 11500, 15328,
                27350, 39091, 26418, 28904, 11531, 57679, 67610, 48843, 67617, 94279, 18591, 58234,  7562, 36021, 36542, 14423, 51435, 26780,   107, 18222,
                79915, 51022, 89084, 93571, 22850, 19155, 93458, 15717, 71485, 71931, 51770, 32425, 85550, 58576, 40662, 87154, 66375, 42259, 39284, 64687,
                47154, 41992, 93253, 68099, 65182,  7832,  1737,  6445, 24857, 62490, 67767, 17229, 16792,  3841, 13708, 94225, 27083,  8998, 74113, 23591,
                45093, 38897, 55860, 36310, 45755, 83098, 46657, 54748,  9198, 78180, 55572,  8201, 25477, 14169, 28761, 81897, 68264, 92308, 91581, 20762,
                88761, 43381, 46297,  9031, 48534, 34515, 96486, 25444, 30447, 92494, 31225, 40359, 14538, 94723, 64929, 70701,  9430, 83700, 69338, 76542
        };
        System.out.println(so2.stoneGame(piles));
    }
    /********************************  end of test ********************************/
}

class Solution {
    public boolean stoneGame(int[] piles) {
        if (2 == piles.length) {
            return true;
        }
        int total = 0;
        for (int ele : piles) {
            total += ele;
        }
        int max = optimalAccumulate(piles, 0, piles.length - 1);
        return total - max < max;
    }

    /// @brief recursion, low efficiency
    private int optimalAccumulate(int[] piles, int low, int high) {
        if (low == high) {
            return piles[low];
        } else if (low + 1 == high) {
            return Math.max(piles[low], piles[high]);
        }
        int sum1 = piles[low] + optimalAccumulate(piles, low + 2, high);
        int sum2 = piles[low] + optimalAccumulate(piles, low + 1, high - 1);
        int sum3 = piles[high] + optimalAccumulate(piles, low + 1, high - 1);
        int sum4 = piles[high] + optimalAccumulate(piles, low, high - 2);
        return Math.max(Math.max(sum1, sum2), Math.max(sum3, sum4));
    }
}

class SolutionV2 {
    /// @brief calculate maximum possible sum in dp manner and compare
    public boolean stoneGame(int[] piles) {
        if (2 == piles.length) {
            return true;
        }
        int total = 0;
        for (int ele : piles) {
            total += ele;
        }
        int lens = piles.length;
        int[][] matrix = new int[lens][lens];
        for (int i = 0; i < lens; ++ i) {
            matrix[i][i] = piles[i];
        }
        for (int i = 0; i < lens - 1; ++ i) {
            matrix[i][i + 1] = Math.max(piles[i], piles[i + 1]);
        }
        for (int i = 2; i < lens; ++ i) {
            for (int j = 0; j + i < lens; ++ j) {
                int sum1 = (i + 2 < lens) ? piles[i] + matrix[i + 2][j] : 0;
                int sum2 = (i + 1 < lens && j - 1 >= 0) ? piles[i] + matrix[i + 1][j - 1] : 0;
                int sum3 = (i + 1 < lens && j - 1 >= 0) ? piles[j] + matrix[i + 1][j - 1] : 0;
                int sum4 = (j - 2 >= 0) ? piles[j] + matrix[i][j - 2] : 0;
                matrix[j + i][j] = Math.max(Math.max(sum1, sum2), Math.max(sum3, sum4));
            }
        }
        return total - matrix[0][lens - 1] > matrix[0][lens - 1];
    }
}